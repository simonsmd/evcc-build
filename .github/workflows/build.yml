name: Build

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  schedule: # runs on the default branch: master
    - cron: "0 2 * * *" # run at 2 AM UTC
  workflow_dispatch:

jobs:
  check_upstream:
    runs-on: ubuntu-latest
    name: Check latest commit/tag
    outputs:
      build_nightly: ${{ steps.check.outputs.build_nightly }}
      new_tag: ${{ steps.check.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "evcc-io/evcc"
          fetch-depth: 0
          fetch-tags: true

      - id: check
        name: check commmits/tags within the last 24h
        run: |
          test -z "$(git rev-list --after="24 hours" master)" && echo "build_nightly=false" | tee -a $GITHUB_OUTPUT
          git --no-pager log --tags --after "24 hours" --simplify-by-decoration --pretty="%D" --max-count 1
          echo "new_tag=$(git --no-pager log --tags --after "24 hours" --simplify-by-decoration --pretty="%D" --max-count 1  | grep -Po "\d+(.\d+(.\d+)?)?" | head -1)" | tee -a $GITHUB_OUTPUT

  build-push-nightly-image:
    name: Build nightly image
    needs: check_upstream
    if: ${{ (needs.check_upstream.outputs.build_nightly != 'false') || (github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "evcc-io/evcc"

      - id: remove-sponsor-check
        run: |
          find ./charger ./server ./vehicle \( -name '*.go' -a -not -name "*cloud*" \) -print0 | while read -r -d $'\0' file; do
            if grep -Fq "if !sponsor.IsAuthorized()" "$file"; then
              echo "$file"
              sed -i "/if !sponsor.IsAuthorized()/,+2d" "$file"
              # keep sponsor import in tesla.go file
              if [ "$file" != "./vehicle/tesla.go" ] ; then
                  sed -i '\#evcc/util/sponsor#d' "$file"
              fi
              # remove unused import in modbus proxy file
              if [ "$file" = "./server/modbus/proxy.go" ]; then
                sed -i '\#evcc/api#d' "$file"
              fi
            fi
          done

      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/evcc:nightly
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-push-release-image:
    name: Build release image
    needs: check_upstream
    if: ${{ needs.check_upstream.outputs.new_tag != '' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "evcc-io/evcc"
          ref: ${{ needs.check_upstream.outputs.new_tag }}

      - id: remove-sponsor-check
        name: Remove sponsor check
        run: |
          find ./charger ./server ./vehicle \( -name '*.go' -a -not -name "*cloud*" \) -print0 | while read -r -d $'\0' file; do
            if grep -Fq "if !sponsor.IsAuthorized()" "$file"; then
              echo "$file"
              sed -i "/if !sponsor.IsAuthorized()/,+2d" "$file"
              # keep sponsor import in tesla.go file
              if [ "$file" != "./vehicle/tesla.go" ] ; then
                  sed -i '\#evcc/util/sponsor#d' "$file"
              fi
              # remove unused import in modbus proxy file
              if [ "$file" = "./server/modbus/proxy.go" ]; then
                sed -i '\#evcc/api#d' "$file"
              fi
            fi
          done


      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/evcc
          context: git
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: RELEASE=1
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

